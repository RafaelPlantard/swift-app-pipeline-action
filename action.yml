name: 'Swift App Pipeline Action'
description: 'Automate Swift app development with linting, testing, building, and releasing for macOS. All-in-one CI/CD solution.'
author: 'Arnab Banerjee'
branding:
  icon: 'box'
  color: 'red'
inputs:
  xcode-version:
    description: 'Xcode version to use'
    required: false
    default: 'latest'
  macos-version:
    description: 'macOS version to use'
    required: false
    default: 'latest'
  project-name:
    description: 'Name of the Xcode project file (without .xcodeproj extension)'
    required: true
  scheme-name:
    description: 'Name of the Xcode scheme to use'
    required: true
  app-name:
    description: 'Name of the app (used for artifact naming)'
    required: false
    default: '${{ inputs.project-name }}'
  run-lint:
    description: 'Whether to run SwiftLint'
    required: false
    default: 'true'
    type: boolean
  run-tests:
    description: 'Whether to run tests'
    required: false
    default: 'true'
    type: boolean
  run-build:
    description: 'Whether to build the app'
    required: false
    default: 'true'
    type: boolean
  create-release:
    description: 'Whether to create a GitHub release'
    required: false
    default: 'false'
    type: boolean
  sign-app:
    description: 'Whether to sign the app'
    required: false
    default: 'false'
    type: boolean
  ignore-step-failure:
    description: 'Whether to continue the pipeline if a step fails'
    required: false
    default: 'false'
    type: boolean
  increment-build-version:
    description: 'Whether to increment the build version'
    required: false
    default: 'true'
    type: boolean
  build-version-increment:
    description: 'Custom build version increment (if not using git commit count)'
    required: false
    default: ''
  custom-version:
    description: 'Custom version string to set (overrides increment)'
    required: false
  remove-quarantine:
    description: 'Whether to remove quarantine from the built app'
    required: false
    default: 'true'
    type: boolean
  comment-on-pr:
    description: 'Whether to comment on the PR with release info'
    required: false
    default: 'false'
    type: boolean
  pr-comment-template:
    description: 'Template for PR comment'
    required: false
    default: 'New build available: {release-url}'
  create-dmg:
    description: 'Whether to create a DMG instead of ZIP'
    required: false
    default: 'false'
    type: boolean
  dmg-background:
    description: 'Path to DMG background image'
    required: false
    default: ''
  dmg-window-size:
    description: 'Size of the DMG window (width x height)'
    required: false
    default: '600x400'
  dmg-icon-size:
    description: 'Size of icons in the DMG'
    required: false
    default: '128'
  code-signing-identity:
    description: 'Code signing identity for app signing'
    required: false
    default: ''
  provisioning-profile:
    description: 'Provisioning profile for app signing'
    required: false
    default: ''
  github-token:
    description: 'GitHub token for creating releases and commenting on PRs'
    required: true
outputs:
  build-number:
    description: 'The build number used for this run'
  version:
    description: 'The version string used for this run'
  artifact-path:
    description: 'Path to the built artifact (app bundle, ZIP, or DMG)'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Run SwiftLint
      if: inputs.run-lint == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_RUN_LINT: ${{ inputs.run-lint }}
      run: ${{ github.action_path }}/scripts/lint.sh

    - name: Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
        INPUT_RUN_TESTS: ${{ inputs.run-tests }}
      run: ${{ github.action_path }}/scripts/test.sh

    - name: Increment version
      if: inputs.increment-build-version == 'true'
      shell: bash
      id: increment-version
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_INCREMENT_BUILD_VERSION: ${{ inputs.increment-build-version }}
        INPUT_BUILD_VERSION_INCREMENT: ${{ inputs.build-version-increment }}
        INPUT_CUSTOM_VERSION: ${{ inputs.custom-version }}
      run: ${{ github.action_path }}/scripts/increment-version.sh

    - name: Build App
      if: inputs.run-build == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
        INPUT_RUN_BUILD: ${{ inputs.run-build }}
        INPUT_REMOVE_QUARANTINE: ${{ inputs.remove-quarantine }}
        BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
      run: ${{ github.action_path }}/scripts/build.sh

    - name: Sign App
      if: inputs.sign-app == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SIGN_APP: ${{ inputs.sign-app }}
        INPUT_CODE_SIGNING_IDENTITY: ${{ inputs.code-signing-identity }}
        INPUT_PROVISIONING_PROFILE: ${{ inputs.provisioning-profile }}
      run: ${{ github.action_path }}/scripts/sign.sh

    - name: Create DMG
      if: inputs.create-dmg == 'true'
      shell: bash
      env:
        INPUT_APP_NAME: ${{ inputs.app-name }}
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_CREATE_DMG: ${{ inputs.create-dmg }}
        INPUT_DMG_BACKGROUND: ${{ inputs.dmg-background }}
        INPUT_DMG_WINDOW_SIZE: ${{ inputs.dmg-window-size }}
        INPUT_DMG_ICON_SIZE: ${{ inputs.dmg-icon-size }}
        BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
      run: ${{ github.action_path }}/scripts/create-dmg.sh

    - name: Create Release
      if: inputs.create-release == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_APP_NAME: ${{ inputs.app-name }}
        INPUT_CREATE_RELEASE: ${{ inputs.create-release }}
        INPUT_CREATE_DMG: ${{ inputs.create-dmg }}
        INPUT_DMG_BACKGROUND: ${{ inputs.dmg-background }}
        BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: ${{ github.action_path }}/scripts/release.sh

    - name: Comment on PR
      if: inputs.comment-on-pr == 'true'
      shell: bash
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_COMMENT_ON_PR: ${{ inputs.comment-on-pr }}
        INPUT_ARTIFACT_PATH: ${{ steps.create-release.outputs.artifact-path }}
        INPUT_BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
        INPUT_APP_NAME: ${{ inputs.app-name }}
        INPUT_PR_COMMENT_TEMPLATE: ${{ inputs.pr-comment-template }}
      run: ${{ github.action_path }}/scripts/comment-pr.sh